module VerifyPool where
import Daml.Script
import qualified AMM.Pool as P
import DA.List (find)
import DA.Text (isInfixOf)
import DA.Foldable (mapA_)

verifyPool : Script ()
verifyPool = script do
  parties <- listKnownParties
  let appProvider = case find (\p -> "app-provider" `isInfixOf` partyToText p.party) parties of
        Some p -> p.party
        None -> error "app-provider party not found"
  
  debug $ "Querying pools for app-provider: " <> show appProvider
  pools <- query @P.Pool appProvider
  debug $ "Found " <> show (length pools) <> " pools"
  mapA_ (\(cid, pool) -> debug $ "Pool ID: " <> pool.poolId <> ", CID: " <> show cid) pools
  return ()
