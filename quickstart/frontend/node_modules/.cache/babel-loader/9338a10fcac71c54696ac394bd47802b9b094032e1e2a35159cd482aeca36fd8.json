{"ast":null,"code":"var _process$env$REACT_AP, _process$env$REACT_AP2, _process$env$REACT_AP3, _process$env$REACT_AP4;\n// OAuth Authentication Service for Canton Network DevNet\n// Using Keycloak-js with PKCE flow (Authorization Code + PKCE)\n\nimport Keycloak from \"keycloak-js\";\nconst AUTH_ENABLED = ((_process$env$REACT_AP = process.env.REACT_APP_AUTH_ENABLED) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : \"false\") === \"true\";\nconst keycloak = new Keycloak({\n  url: (_process$env$REACT_AP2 = process.env.REACT_APP_OAUTH_BASE_URL) !== null && _process$env$REACT_AP2 !== void 0 ? _process$env$REACT_AP2 : \"https://auth.canton.network\",\n  realm: (_process$env$REACT_AP3 = process.env.REACT_APP_OAUTH_REALM) !== null && _process$env$REACT_AP3 !== void 0 ? _process$env$REACT_AP3 : \"AppProvider\",\n  clientId: (_process$env$REACT_AP4 = process.env.REACT_APP_OAUTH_CLIENT_ID) !== null && _process$env$REACT_AP4 !== void 0 ? _process$env$REACT_AP4 : \"clearportx-web\"\n});\nlet initialized = false;\n\n/**\n * Initialize Keycloak authentication\n * Should be called once at app startup\n */\nexport async function initAuth() {\n  if (!AUTH_ENABLED || initialized) {\n    console.log('[Auth] Authentication disabled or already initialized');\n    return;\n  }\n  try {\n    var _process$env$REACT_AP5;\n    initialized = true;\n    const authenticated = await keycloak.init({\n      onLoad: \"check-sso\",\n      pkceMethod: \"S256\",\n      checkLoginIframe: false,\n      redirectUri: (_process$env$REACT_AP5 = process.env.REACT_APP_OAUTH_REDIRECT_URI) !== null && _process$env$REACT_AP5 !== void 0 ? _process$env$REACT_AP5 : window.location.origin + \"/auth/callback\",\n      silentCheckSsoRedirectUri: `${window.location.origin}/silent-check-sso.html`\n    });\n    console.log('[Auth] Keycloak initialized. Authenticated:', authenticated);\n\n    // Auto-refresh token every 30 seconds\n    setInterval(async () => {\n      if (keycloak.authenticated) {\n        try {\n          const refreshed = await keycloak.updateToken(60);\n          if (refreshed) {\n            console.log('[Auth] Token refreshed');\n          }\n        } catch (error) {\n          console.warn('[Auth] Failed to refresh token:', error);\n        }\n      }\n    }, 30000);\n  } catch (error) {\n    console.error('[Auth] Failed to initialize Keycloak:', error);\n    throw error;\n  }\n}\n\n/**\n * Check if user is authenticated\n */\nexport function isAuthenticated() {\n  return AUTH_ENABLED ? !!keycloak.authenticated : true;\n}\n\n/**\n * Initiate login flow\n */\nexport function login() {\n  var _process$env$REACT_AP6;\n  if (!AUTH_ENABLED) {\n    console.log('[Auth] Authentication disabled, skipping login');\n    return;\n  }\n  const redirectUri = (_process$env$REACT_AP6 = process.env.REACT_APP_OAUTH_REDIRECT_URI) !== null && _process$env$REACT_AP6 !== void 0 ? _process$env$REACT_AP6 : window.location.origin + \"/auth/callback\";\n  console.log('[Auth] Initiating login with redirect:', redirectUri);\n  keycloak.login({\n    redirectUri\n  });\n}\n\n/**\n * Logout user\n */\nexport function logout() {\n  if (!AUTH_ENABLED) {\n    console.log('[Auth] Authentication disabled, skipping logout');\n    return;\n  }\n  console.log('[Auth] Logging out');\n  keycloak.logout({\n    redirectUri: window.location.origin\n  });\n}\n\n/**\n * Get current access token (JWT)\n */\nexport function getAccessToken() {\n  var _keycloak$token;\n  if (!AUTH_ENABLED) {\n    // Return mock token for development\n    return \"devnet-mock-token\";\n  }\n  return (_keycloak$token = keycloak.token) !== null && _keycloak$token !== void 0 ? _keycloak$token : null;\n}\n\n/**\n * Get username from token\n */\nexport function getUsername() {\n  var _ref, _tokenParsed$preferre;\n  if (!AUTH_ENABLED) {\n    return \"devnet-user\";\n  }\n  const tokenParsed = keycloak.tokenParsed;\n  return (_ref = (_tokenParsed$preferre = tokenParsed === null || tokenParsed === void 0 ? void 0 : tokenParsed.preferred_username) !== null && _tokenParsed$preferre !== void 0 ? _tokenParsed$preferre : tokenParsed === null || tokenParsed === void 0 ? void 0 : tokenParsed.email) !== null && _ref !== void 0 ? _ref : null;\n}\n\n/**\n * Get user's party ID from token (if available)\n */\nexport function getPartyId() {\n  var _ref2, _tokenParsed$party;\n  if (!AUTH_ENABLED) {\n    return null;\n  }\n  const tokenParsed = keycloak.tokenParsed;\n  // Check for custom party claim (you may need to adjust this based on your Keycloak setup)\n  return (_ref2 = (_tokenParsed$party = tokenParsed === null || tokenParsed === void 0 ? void 0 : tokenParsed.party) !== null && _tokenParsed$party !== void 0 ? _tokenParsed$party : tokenParsed === null || tokenParsed === void 0 ? void 0 : tokenParsed.sub) !== null && _ref2 !== void 0 ? _ref2 : null;\n}\n\n/**\n * Get full token payload (for debugging)\n */\nexport function getTokenPayload() {\n  var _ref3;\n  if (!AUTH_ENABLED) {\n    return {\n      mock: true,\n      username: \"devnet-user\"\n    };\n  }\n  return (_ref3 = keycloak.tokenParsed) !== null && _ref3 !== void 0 ? _ref3 : null;\n}\n\n// Export raw keycloak instance for advanced usage\nexport { keycloak };","map":{"version":3,"names":["Keycloak","AUTH_ENABLED","_process$env$REACT_AP","process","env","REACT_APP_AUTH_ENABLED","keycloak","url","_process$env$REACT_AP2","REACT_APP_OAUTH_BASE_URL","realm","_process$env$REACT_AP3","REACT_APP_OAUTH_REALM","clientId","_process$env$REACT_AP4","REACT_APP_OAUTH_CLIENT_ID","initialized","initAuth","console","log","_process$env$REACT_AP5","authenticated","init","onLoad","pkceMethod","checkLoginIframe","redirectUri","REACT_APP_OAUTH_REDIRECT_URI","window","location","origin","silentCheckSsoRedirectUri","setInterval","refreshed","updateToken","error","warn","isAuthenticated","login","_process$env$REACT_AP6","logout","getAccessToken","_keycloak$token","token","getUsername","_ref","_tokenParsed$preferre","tokenParsed","preferred_username","email","getPartyId","_ref2","_tokenParsed$party","party","sub","getTokenPayload","_ref3","mock","username"],"sources":["/root/canton-website/app/src/services/auth.ts"],"sourcesContent":["// OAuth Authentication Service for Canton Network DevNet\n// Using Keycloak-js with PKCE flow (Authorization Code + PKCE)\n\nimport Keycloak from \"keycloak-js\";\n\nconst AUTH_ENABLED = (process.env.REACT_APP_AUTH_ENABLED ?? \"false\") === \"true\";\n\nconst keycloak = new Keycloak({\n  url: process.env.REACT_APP_OAUTH_BASE_URL ?? \"https://auth.canton.network\",\n  realm: process.env.REACT_APP_OAUTH_REALM ?? \"AppProvider\",\n  clientId: process.env.REACT_APP_OAUTH_CLIENT_ID ?? \"clearportx-web\",\n});\n\nlet initialized = false;\n\n/**\n * Initialize Keycloak authentication\n * Should be called once at app startup\n */\nexport async function initAuth(): Promise<void> {\n  if (!AUTH_ENABLED || initialized) {\n    console.log('[Auth] Authentication disabled or already initialized');\n    return;\n  }\n\n  try {\n    initialized = true;\n    const authenticated = await keycloak.init({\n      onLoad: \"check-sso\",\n      pkceMethod: \"S256\",\n      checkLoginIframe: false,\n      redirectUri: process.env.REACT_APP_OAUTH_REDIRECT_URI ?? window.location.origin + \"/auth/callback\",\n      silentCheckSsoRedirectUri: `${window.location.origin}/silent-check-sso.html`,\n    });\n\n    console.log('[Auth] Keycloak initialized. Authenticated:', authenticated);\n\n    // Auto-refresh token every 30 seconds\n    setInterval(async () => {\n      if (keycloak.authenticated) {\n        try {\n          const refreshed = await keycloak.updateToken(60);\n          if (refreshed) {\n            console.log('[Auth] Token refreshed');\n          }\n        } catch (error) {\n          console.warn('[Auth] Failed to refresh token:', error);\n        }\n      }\n    }, 30000);\n  } catch (error) {\n    console.error('[Auth] Failed to initialize Keycloak:', error);\n    throw error;\n  }\n}\n\n/**\n * Check if user is authenticated\n */\nexport function isAuthenticated(): boolean {\n  return AUTH_ENABLED ? !!keycloak.authenticated : true;\n}\n\n/**\n * Initiate login flow\n */\nexport function login(): void {\n  if (!AUTH_ENABLED) {\n    console.log('[Auth] Authentication disabled, skipping login');\n    return;\n  }\n\n  const redirectUri = process.env.REACT_APP_OAUTH_REDIRECT_URI ?? window.location.origin + \"/auth/callback\";\n  console.log('[Auth] Initiating login with redirect:', redirectUri);\n  keycloak.login({ redirectUri });\n}\n\n/**\n * Logout user\n */\nexport function logout(): void {\n  if (!AUTH_ENABLED) {\n    console.log('[Auth] Authentication disabled, skipping logout');\n    return;\n  }\n\n  console.log('[Auth] Logging out');\n  keycloak.logout({ redirectUri: window.location.origin });\n}\n\n/**\n * Get current access token (JWT)\n */\nexport function getAccessToken(): string | null {\n  if (!AUTH_ENABLED) {\n    // Return mock token for development\n    return \"devnet-mock-token\";\n  }\n  return keycloak.token ?? null;\n}\n\n/**\n * Get username from token\n */\nexport function getUsername(): string | null {\n  if (!AUTH_ENABLED) {\n    return \"devnet-user\";\n  }\n\n  const tokenParsed = keycloak.tokenParsed as Record<string, any> | undefined;\n  return tokenParsed?.preferred_username ?? tokenParsed?.email ?? null;\n}\n\n/**\n * Get user's party ID from token (if available)\n */\nexport function getPartyId(): string | null {\n  if (!AUTH_ENABLED) {\n    return null;\n  }\n\n  const tokenParsed = keycloak.tokenParsed as Record<string, any> | undefined;\n  // Check for custom party claim (you may need to adjust this based on your Keycloak setup)\n  return tokenParsed?.party ?? tokenParsed?.sub ?? null;\n}\n\n/**\n * Get full token payload (for debugging)\n */\nexport function getTokenPayload(): Record<string, any> | null {\n  if (!AUTH_ENABLED) {\n    return { mock: true, username: \"devnet-user\" };\n  }\n\n  return (keycloak.tokenParsed as Record<string, any>) ?? null;\n}\n\n// Export raw keycloak instance for advanced usage\nexport { keycloak };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}