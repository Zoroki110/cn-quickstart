module GiveAliceBobTokens where

import Daml.Script
import Token.Token
import DA.List (find)
import DA.Text (isInfixOf)

-- Give Alice and Bob test tokens for swap testing
-- Uses listKnownParties to reference EXISTING parties on Canton Network
-- Run with: daml script --dar <dar-file> --script-name GiveAliceBobTokens:giveTokens
giveTokens : Script ()
giveTokens = script do
  -- Use existing parties (must already exist on Canton Network)
  parties <- listKnownParties

  let alice = case find (\p -> "Alice" `isInfixOf` partyToText p.party && not ("app" `isInfixOf` partyToText p.party)) parties of
        Some p -> p.party
        None -> error "Alice party not found"

  let bob = case find (\p -> "Bob" `isInfixOf` partyToText p.party) parties of
        Some p -> p.party
        None -> error "Bob party not found"

  let appProvider = case find (\p -> "app-provider" `isInfixOf` partyToText p.party) parties of
        Some p -> p.party
        None -> error "app-provider party not found"

  debug "âœ… Using existing parties:"
  debug $ "Alice: " <> show alice
  debug $ "Bob: " <> show bob
  debug $ "app-provider: " <> show appProvider

  -- Mint tokens for Alice (issuer = app-provider)
  debug "ðŸ’° Minting tokens for Alice..."

  -- Alice gets 10 ETH
  aliceETH <- submit appProvider do
    createCmd Token with
      issuer = appProvider
      owner = alice
      symbol = "ETH"
      amount = 10.0

  debug $ "âœ… Alice ETH: " <> show aliceETH

  -- Alice gets 50,000 USDC
  aliceUSDC <- submit appProvider do
    createCmd Token with
      issuer = appProvider
      owner = alice
      symbol = "USDC"
      amount = 50000.0

  debug $ "âœ… Alice USDC: " <> show aliceUSDC

  -- Alice gets 20 CANTON
  aliceCANTON <- submit appProvider do
    createCmd Token with
      issuer = appProvider
      owner = alice
      symbol = "CANTON"
      amount = 20.0

  debug $ "âœ… Alice CANTON: " <> show aliceCANTON

  -- Alice gets 0.5 CBTC
  aliceCBTC <- submit appProvider do
    createCmd Token with
      issuer = appProvider
      owner = alice
      symbol = "CBTC"
      amount = 0.5

  debug $ "âœ… Alice CBTC: " <> show aliceCBTC

  -- Mint tokens for Bob
  debug "ðŸ’° Minting tokens for Bob..."

  -- Bob gets 15 ETH
  bobETH <- submit appProvider do
    createCmd Token with
      issuer = appProvider
      owner = bob
      symbol = "ETH"
      amount = 15.0

  debug $ "âœ… Bob ETH: " <> show bobETH

  -- Bob gets 30,000 USDC
  bobUSDC <- submit appProvider do
    createCmd Token with
      issuer = appProvider
      owner = bob
      symbol = "USDC"
      amount = 30000.0

  debug $ "âœ… Bob USDC: " <> show bobUSDC

  -- Bob gets 15 CANTON
  bobCANTON <- submit appProvider do
    createCmd Token with
      issuer = appProvider
      owner = bob
      symbol = "CANTON"
      amount = 15.0

  debug $ "âœ… Bob CANTON: " <> show bobCANTON

  -- Bob gets 0.3 CBTC
  bobCBTC <- submit appProvider do
    createCmd Token with
      issuer = appProvider
      owner = bob
      symbol = "CBTC"
      amount = 0.3

  debug $ "âœ… Bob CBTC: " <> show bobCBTC

  debug "ðŸŽ‰ Token minting complete!"
  debug "Alice: 10 ETH, 50,000 USDC, 20 CANTON, 0.5 CBTC"
  debug "Bob: 15 ETH, 30,000 USDC, 15 CANTON, 0.3 CBTC"

  return ()
