module FastInitV104 where
import Daml.Script
import DA.Time (hours, addRelTime)
import qualified AMM.Pool as P
import qualified Token.Token as T

setup : Script ()
setup = script do
  debug "=== FastInitV104: Starting pool initialization ==="
  
  -- Allocate parties with hints (DevNet compatible)
  op    <- allocatePartyWithHint "OP_10251706" (PartyIdHint "OP_10251706")
  poolP <- allocatePartyWithHint "POOL_10251706" (PartyIdHint "POOL_10251706")
  issA  <- allocatePartyWithHint "ISSA_10251706"  (PartyIdHint "ISSA_10251706")
  issB  <- allocatePartyWithHint "ISSB_10251706"  (PartyIdHint "ISSB_10251706")
  lpiss <- allocatePartyWithHint "LPISS_10251706" (PartyIdHint "LPISS_10251706")
  feeR  <- allocatePartyWithHint "FEE_10251706"   (PartyIdHint "FEE_10251706")
  
  debug $ "  Operator: " <> show op
  debug $ "  Pool party: " <> show poolP

  -- Mint tokens for initial liquidity (owned by poolParty for multi-party submit)
  debug "Creating ETH token (100 ETH)..."
  ethCid <- submit issA $ createCmd T.Token with
    issuer = issA
    owner = poolP
    symbol = "ETH"
    amount = 100.0
    
  debug "Creating USDC token (200,000 USDC)..."
  usdcCid <- submit issB $ createCmd T.Token with
    issuer = issB
    owner = poolP
    symbol = "USDC"
    amount = 200000.0

  -- Create pool with submitMulti (op and poolP must both authorize)
  debug "Creating Pool contract..."
  poolCid <- submitMulti [op, poolP] [] $ createCmd P.Pool with
    poolOperator = op
    poolParty = poolP
    lpIssuer = lpiss
    issuerA = issA
    issuerB = issB
    symbolA = "ETH"
    symbolB = "USDC"
    feeBps = 30
    poolId = "eth-usdc-10251706"
    maxTTL = hours 24
    totalLPSupply = 0.0
    reserveA = 0.0
    reserveB = 0.0
    tokenACid = None
    tokenBCid = None
    protocolFeeReceiver = feeR
    maxInBps = 10000
    maxOutBps = 5000

  debug $ "  Pool created: " <> show poolCid

  -- Add initial liquidity to set tokenACid/tokenBCid
  debug "Adding initial liquidity (100 ETH + 200,000 USDC)..."
  now <- getTime
  let deadline = addRelTime now (hours 1)
  
  (lpCid, newPoolCid) <- submitMulti [poolP, op, lpiss] [] $ 
    exerciseCmd poolCid P.AddLiquidity with
      provider = poolP
      tokenACid = ethCid
      tokenBCid = usdcCid
      amountA = 100.0
      amountB = 200000.0
      minLPTokens = 1.0
      deadline = deadline

  debug $ "  Liquidity added, new pool: " <> show newPoolCid

  -- Verify visibility to operator (critical test!)
  debug "Verifying pool visibility to operator..."
  pools <- query @P.Pool op
  debug $ "POOLS_FOR_OP: " <> show (length pools)
  
  if length pools == 0
    then debug "WARNING: Operator cannot see pool!"
    else debug "SUCCESS: Pool is visible to operator!"

  pure ()
