module FreshPoolOct25 where

import Daml.Script
import DA.Time
import qualified Token.Token as T
import qualified AMM.Pool as P

-- Pool creation with UNIQUE party names to avoid conflicts
-- Date-stamped: October 25, 2025 16:51 UTC
freshPoolCreate : Script ()
freshPoolCreate = script do
  debug "=== CREATING POOL WITH UNIQUE PARTIES ==="

  -- Allocate parties with timestamp suffix to ensure uniqueness
  debug "Step 1: Allocating unique parties..."
  op <- allocateParty "OP_OCT25_1651"
  debug $ "  Operator: " <> show op

  pool <- allocateParty "POOL_OCT25_1651"
  debug $ "  Pool party: " <> show pool

  ethIss <- allocateParty "ETH_OCT25_1651"
  debug $ "  ETH issuer: " <> show ethIss

  usdcIss <- allocateParty "USDC_OCT25_1651"
  debug $ "  USDC issuer: " <> show usdcIss

  lpIss <- allocateParty "LP_OCT25_1651"
  debug $ "  LP issuer: " <> show lpIss

  clx <- allocateParty "CLX_OCT25_1651"
  debug $ "  ClearportX: " <> show clx

  -- Create tokens
  debug "Step 2: Creating ETH token (100 ETH)..."
  ethCid <- submit ethIss $ createCmd T.Token with
    issuer = ethIss
    owner = pool
    symbol = "ETH"
    amount = 100.0
  debug $ "  ETH token: " <> show ethCid

  debug "Step 3: Creating USDC token (200,000 USDC)..."
  usdcCid <- submit usdcIss $ createCmd T.Token with
    issuer = usdcIss
    owner = pool
    symbol = "USDC"
    amount = 200000.0
  debug $ "  USDC token: " <> show usdcCid

  -- Create pool with submitMulti (both pool party and operator must authorize)
  debug "Step 4: Creating Pool contract..."
  poolCid <- submitMulti [pool, op] [] $ createCmd P.Pool with
    poolOperator = op
    poolParty = pool
    lpIssuer = lpIss
    issuerA = ethIss
    issuerB = usdcIss
    symbolA = "ETH"
    symbolB = "USDC"
    feeBps = 30  -- 0.3% fee
    poolId = "eth-usdc-oct25-1651"
    maxTTL = hours 24
    totalLPSupply = 0.0
    reserveA = 100.0
    reserveB = 200000.0
    tokenACid = Some ethCid
    tokenBCid = Some usdcCid
    protocolFeeReceiver = clx
    maxInBps = 10000  -- 100% max input
    maxOutBps = 5000  -- 50% max output

  debug $ "  *** POOL CREATED: " <> show poolCid <> " ***"

  -- Verify visibility
  debug "Step 5: Verifying pool visibility..."
  pools1 <- query @P.Pool op
  debug $ "  Operator sees " <> show (length pools1) <> " pool(s)"

  pools2 <- query @P.Pool pool
  debug $ "  Pool party sees " <> show (length pools2) <> " pool(s)"

  debug "=== SUCCESS! Pool ready for trading ==="
  pure ()
