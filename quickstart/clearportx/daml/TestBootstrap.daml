module TestBootstrap where

import Daml.Script
import qualified AMM.Pool as P
import qualified Token.Token as T
import qualified LPToken.LPToken as LP
import DA.Time

-- Test script to verify v1.0.1 works with self-transfer
-- This will create a small pool and test AddLiquidity with provider == poolParty
testSelfTransferBootstrap : Script ()
testSelfTransferBootstrap = script do
  appProvider <- allocateParty "AppProvider"

  -- Create tokens owned by appProvider
  usdcCid <- submit appProvider $ createCmd T.Token with
    issuer = appProvider
    owner = appProvider
    symbol = "USDC"
    amount = 100000.0

  ethCid <- submit appProvider $ createCmd T.Token with
    issuer = appProvider
    owner = appProvider
    symbol = "ETH"
    amount = 100.0

  -- Create pool where appProvider is poolParty and lpIssuer
  poolCid <- submit appProvider $ createCmd P.Pool with
    poolOperator = appProvider
    poolParty = appProvider
    lpIssuer = appProvider
    issuerA = appProvider
    issuerB = appProvider
    symbolA = "ETH"
    symbolB = "USDC"
    feeBps = 30
    poolId = "TEST-ETH-USDC"
    maxTTL = hours 2
    totalLPSupply = 0.0
    reserveA = 0.0
    reserveB = 0.0
    tokenACid = None
    tokenBCid = None
    protocolFeeReceiver = appProvider
    maxInBps = 1000
    maxOutBps = 1000

  -- Test: AddLiquidity with provider == poolParty (self-transfer scenario)
  -- This should work now that we removed the self-transfer check
  now <- getTime
  (lpTokenCid, newPoolCid) <- submit appProvider $ exerciseCmd poolCid P.AddLiquidity with
    provider = appProvider  -- Same as poolParty!
    tokenACid = ethCid
    tokenBCid = usdcCid
    amountA = 10.0
    amountB = 20000.0
    minLPTokens = 0.0
    deadline = addRelTime now (hours 1)

  debug "âœ… SUCCESS: AddLiquidity worked with provider == poolParty!"
  debug "This confirms v1.0.1 package allows self-transfer for bootstrap"

  return ()
