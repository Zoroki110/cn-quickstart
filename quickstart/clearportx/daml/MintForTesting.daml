module MintForTesting where

import Daml.Script
import Token.Token
import DA.List (find)
import DA.Text (isInfixOf)

-- Mint tokens for app-provider for testing swaps
-- Since app-provider already vetted the package, this will work immediately
mintForTesting : Script ()
mintForTesting = script do
  parties <- listKnownParties

  -- Find app-provider (with hint)
  let appProvider = case find (\p -> "app-provider-4f1df03a" `isInfixOf` partyToText p.party) parties of
        Some p -> p.party
        None -> error "app-provider-4f1df03a not found"

  debug "ðŸ’° Minting test tokens for app-provider..."
  debug $ "Party: " <> show appProvider

  -- Mint ETH for testing swaps
  ethToken <- submit appProvider do
    createCmd Token with
      issuer = appProvider
      owner = appProvider
      symbol = "ETH"
      amount = 50.0

  debug $ "âœ… Minted 50 ETH: " <> show ethToken

  -- Mint USDC for testing swaps
  usdcToken <- submit appProvider do
    createCmd Token with
      issuer = appProvider
      owner = appProvider
      symbol = "USDC"
      amount = 100000.0

  debug $ "âœ… Minted 100,000 USDC: " <> show usdcToken

  -- Mint CANTON
  cantonToken <- submit appProvider do
    createCmd Token with
      issuer = appProvider
      owner = appProvider
      symbol = "CANTON"
      amount = 100.0

  debug $ "âœ… Minted 100 CANTON: " <> show cantonToken

  -- Mint CBTC
  cbtcToken <- submit appProvider do
    createCmd Token with
      issuer = appProvider
      owner = appProvider
      symbol = "CBTC"
      amount = 2.0

  debug $ "âœ… Minted 2 CBTC: " <> show cbtcToken

  debug ""
  debug "ðŸŽ‰ All tokens minted! Ready to test swaps."
  debug "Use 'app-provider' as the X-User header to act as this party"

  return ()
