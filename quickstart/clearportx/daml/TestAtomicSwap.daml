module TestAtomicSwap where

import Daml.Script
import qualified Token.Token as T
import qualified AMM.Pool as P
import qualified AMM.AtomicSwap as AS
import DA.Time

-- Test atomic swap: entire swap in single transaction, no race conditions
testAtomicSwap : Script ()
testAtomicSwap = script do
  -- Setup parties
  alice <- allocateParty "Alice"
  poolParty <- allocateParty "PoolParty"
  treasury <- allocateParty "Treasury"

  -- Create tokens for Alice
  ethCid <- submit alice do
    createCmd T.Token with
      issuer = alice
      owner = alice
      symbol = "ETH"
      amount = 10.0

  usdtCid <- submit poolParty do
    createCmd T.Token with
      issuer = poolParty
      owner = poolParty
      symbol = "USDT"
      amount = 1000.0

  -- Create pool with liquidity
  poolCid <- submit poolParty do
    createCmd P.Pool with
      poolOperator = poolParty
      poolParty = poolParty
      lpIssuer = poolParty
      issuerA = alice
      issuerB = poolParty
      symbolA = "ETH"
      symbolB = "USDT"
      feeBps = 30  -- 0.3%
      poolId = "ETH-USDT"
      maxTTL = hours 24
      totalLPSupply = 100.0
      reserveA = 5.0    -- 5 ETH
      reserveB = 500.0  -- 500 USDT (price: 1 ETH = 100 USDT)
      tokenACid = None  -- Will be set on first swap
      tokenBCid = Some usdtCid
      protocolFeeReceiver = treasury
      maxInBps = 10000  -- 100%
      maxOutBps = 5000  -- 50%

  -- Alice creates atomic swap proposal
  now <- getTime
  let deadline = addRelTime now (hours 1)

  atomicSwapProposalCid <- submit alice do
    createCmd AS.AtomicSwapProposal with
      trader = alice
      poolCid = poolCid
      poolParty = poolParty
      poolOperator = poolParty
      issuerA = alice
      issuerB = poolParty
      symbolA = "ETH"
      symbolB = "USDT"
      feeBps = 30
      maxTTL = hours 24
      protocolFeeReceiver = treasury
      traderInputTokenCid = ethCid
      inputSymbol = "ETH"
      inputAmount = 0.1  -- Swap 0.1 ETH
      outputSymbol = "USDT"
      minOutput = 9.0    -- Expect at least 9 USDT (with slippage)
      maxPriceImpactBps = 5000  -- Max 50% price impact
      deadline = deadline

  -- Execute atomic swap with both parties
  receiptCid <- submitMulti [alice, poolParty] [] do
    exerciseCmd atomicSwapProposalCid AS.ExecuteAtomicSwap

  debug "âœ“ Atomic swap executed successfully!"
  debug $ "Receipt CID: " <> show receiptCid

  return ()
