module Unit.TestSwap where

import AMM.Pool
import Token.Token
import DA.Time (seconds, addRelTime)
import Daml.Script

test_swap : Script ()
test_swap = script do
  -- Setup parties
  poolOperator <- allocateParty "PoolOperator"
  poolParty <- allocateParty "PoolParty"
  lpIssuer <- allocateParty "LPIssuer"
  issuerUSDC <- allocateParty "IssuerUSDC"
  issuerETH <- allocateParty "IssuerETH"
  alice <- allocateParty "Alice"
  
  -- Créer pool
  pool <- submit poolOperator $ createCmd Pool with
    poolOperator, poolParty, lpIssuer
    issuerA = issuerETH
    issuerB = issuerUSDC
    symbolA = "ETH"
    symbolB = "USDC"
    feeBps = 30
    poolId = "ETH-USDC"
    maxTTL = seconds 120
  
  -- Créer tokens de liquidité pour le pool
  submit issuerETH $ createCmd Token with
    issuer = issuerETH
    owner = poolParty
    symbol = "ETH"
    amount = 10.0
    
  submit issuerUSDC $ createCmd Token with
    issuer = issuerUSDC
    owner = poolParty
    symbol = "USDC"
    amount = 20000.0
  
  -- Token pour Alice (trader)
  aliceUSDC <- submit issuerUSDC $ createCmd Token with
    issuer = issuerUSDC
    owner = alice
    symbol = "USDC"
    amount = 100.0
  
  -- Vérifier réserves
  (rA, rB) <- submit poolParty $ exerciseCmd pool GetReservesForPool
  debug $ "Reserves before: ETH=" <> show rA <> " USDC=" <> show rB
  
  return ()
