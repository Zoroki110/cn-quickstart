{"ast":null,"code":"var _s = $RefreshSig$();\n// Zustand store for caching Canton contract IDs and state\nimport { create } from 'zustand';\n// Helper function to create pool key\nconst createPoolKey = (tokenASymbol, tokenBSymbol) => {\n  const sorted = [tokenASymbol, tokenBSymbol].sort();\n  return `${sorted[0]}-${sorted[1]}`;\n};\nexport const useContractStore = create((set, get) => ({\n  // Initial state\n  cache: {\n    tokens: new Map(),\n    pools: new Map(),\n    lastUpdate: 0\n  },\n  isLoadingTokens: false,\n  isLoadingPools: false,\n  // Set tokens in cache\n  setTokens: tokens => {\n    const tokenMap = new Map();\n    tokens.forEach(token => {\n      if (token.contractId) {\n        tokenMap.set(token.symbol, token);\n      }\n    });\n    set(state => ({\n      cache: {\n        ...state.cache,\n        tokens: tokenMap,\n        lastUpdate: Date.now()\n      },\n      isLoadingTokens: false\n    }));\n  },\n  // Set pools in cache\n  setPools: pools => {\n    const poolMap = new Map();\n    pools.forEach(pool => {\n      const key = createPoolKey(pool.tokenA.symbol, pool.tokenB.symbol);\n      poolMap.set(key, pool);\n    });\n    set(state => ({\n      cache: {\n        ...state.cache,\n        pools: poolMap,\n        lastUpdate: Date.now()\n      },\n      isLoadingPools: false\n    }));\n  },\n  // Get token by symbol\n  getTokenBySymbol: symbol => {\n    const {\n      cache\n    } = get();\n    return cache.tokens.get(symbol);\n  },\n  // Get pool by token pair\n  getPoolByPair: (tokenASymbol, tokenBSymbol) => {\n    const {\n      cache\n    } = get();\n    const key = createPoolKey(tokenASymbol, tokenBSymbol);\n    return cache.pools.get(key);\n  },\n  // Clear entire cache\n  clearCache: () => {\n    set({\n      cache: {\n        tokens: new Map(),\n        pools: new Map(),\n        lastUpdate: 0\n      }\n    });\n  },\n  // Loading state setters\n  setLoadingTokens: loading => {\n    set({\n      isLoadingTokens: loading\n    });\n  },\n  setLoadingPools: loading => {\n    set({\n      isLoadingPools: loading\n    });\n  }\n}));\n\n// Hook to check if cache is stale (older than 30 seconds)\nexport const useCacheStatus = () => {\n  _s();\n  const lastUpdate = useContractStore(state => state.cache.lastUpdate);\n  const CACHE_TTL = 30000; // 30 seconds\n\n  return {\n    isStale: Date.now() - lastUpdate > CACHE_TTL,\n    lastUpdate,\n    age: Date.now() - lastUpdate\n  };\n};\n_s(useCacheStatus, \"iBBmVUHTgzTxgrFM9P6LvyWXAuk=\", false, function () {\n  return [useContractStore];\n});","map":{"version":3,"names":["create","createPoolKey","tokenASymbol","tokenBSymbol","sorted","sort","useContractStore","set","get","cache","tokens","Map","pools","lastUpdate","isLoadingTokens","isLoadingPools","setTokens","tokenMap","forEach","token","contractId","symbol","state","Date","now","setPools","poolMap","pool","key","tokenA","tokenB","getTokenBySymbol","getPoolByPair","clearCache","setLoadingTokens","loading","setLoadingPools","useCacheStatus","_s","CACHE_TTL","isStale","age"],"sources":["/root/canton-website/app/src/stores/useContractStore.ts"],"sourcesContent":["// Zustand store for caching Canton contract IDs and state\nimport { create } from 'zustand';\nimport { TokenInfo, PoolInfo } from '../types/canton';\n\nexport interface ContractCache {\n  tokens: Map<string, TokenInfo>; // symbol -> TokenInfo with contractId\n  pools: Map<string, PoolInfo>;   // poolKey (e.g., \"USDC-ETH\") -> PoolInfo with contractId\n  lastUpdate: number;\n}\n\ninterface ContractStoreState {\n  // Contract cache\n  cache: ContractCache;\n\n  // Loading states\n  isLoadingTokens: boolean;\n  isLoadingPools: boolean;\n\n  // Actions\n  setTokens: (tokens: TokenInfo[]) => void;\n  setPools: (pools: PoolInfo[]) => void;\n  getTokenBySymbol: (symbol: string) => TokenInfo | undefined;\n  getPoolByPair: (tokenASymbol: string, tokenBSymbol: string) => PoolInfo | undefined;\n  clearCache: () => void;\n\n  // Loading state setters\n  setLoadingTokens: (loading: boolean) => void;\n  setLoadingPools: (loading: boolean) => void;\n}\n\n// Helper function to create pool key\nconst createPoolKey = (tokenASymbol: string, tokenBSymbol: string): string => {\n  const sorted = [tokenASymbol, tokenBSymbol].sort();\n  return `${sorted[0]}-${sorted[1]}`;\n};\n\nexport const useContractStore = create<ContractStoreState>((set, get) => ({\n  // Initial state\n  cache: {\n    tokens: new Map(),\n    pools: new Map(),\n    lastUpdate: 0\n  },\n  isLoadingTokens: false,\n  isLoadingPools: false,\n\n  // Set tokens in cache\n  setTokens: (tokens: TokenInfo[]) => {\n    const tokenMap = new Map<string, TokenInfo>();\n    tokens.forEach(token => {\n      if (token.contractId) {\n        tokenMap.set(token.symbol, token);\n      }\n    });\n\n    set(state => ({\n      cache: {\n        ...state.cache,\n        tokens: tokenMap,\n        lastUpdate: Date.now()\n      },\n      isLoadingTokens: false\n    }));\n  },\n\n  // Set pools in cache\n  setPools: (pools: PoolInfo[]) => {\n    const poolMap = new Map<string, PoolInfo>();\n    pools.forEach(pool => {\n      const key = createPoolKey(pool.tokenA.symbol, pool.tokenB.symbol);\n      poolMap.set(key, pool);\n    });\n\n    set(state => ({\n      cache: {\n        ...state.cache,\n        pools: poolMap,\n        lastUpdate: Date.now()\n      },\n      isLoadingPools: false\n    }));\n  },\n\n  // Get token by symbol\n  getTokenBySymbol: (symbol: string) => {\n    const { cache } = get();\n    return cache.tokens.get(symbol);\n  },\n\n  // Get pool by token pair\n  getPoolByPair: (tokenASymbol: string, tokenBSymbol: string) => {\n    const { cache } = get();\n    const key = createPoolKey(tokenASymbol, tokenBSymbol);\n    return cache.pools.get(key);\n  },\n\n  // Clear entire cache\n  clearCache: () => {\n    set({\n      cache: {\n        tokens: new Map(),\n        pools: new Map(),\n        lastUpdate: 0\n      }\n    });\n  },\n\n  // Loading state setters\n  setLoadingTokens: (loading: boolean) => {\n    set({ isLoadingTokens: loading });\n  },\n\n  setLoadingPools: (loading: boolean) => {\n    set({ isLoadingPools: loading });\n  }\n}));\n\n// Hook to check if cache is stale (older than 30 seconds)\nexport const useCacheStatus = () => {\n  const lastUpdate = useContractStore(state => state.cache.lastUpdate);\n  const CACHE_TTL = 30000; // 30 seconds\n\n  return {\n    isStale: Date.now() - lastUpdate > CACHE_TTL,\n    lastUpdate,\n    age: Date.now() - lastUpdate\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}