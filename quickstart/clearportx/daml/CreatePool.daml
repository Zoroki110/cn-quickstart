module CreatePool where

import Daml.Script
import AMM.Pool
import Token.Token
import DA.Time (hours)
import DA.Date (toDateUTC)

-- Simple script to create a pool
createPoolScript : Script ()
createPoolScript = do
  -- Create new parties with unique names based on timestamp
  now <- getTime
  let suffix = show (toDateUTC now)
  
  debug $ "Creating parties with suffix: " <> suffix
  operator <- allocateParty $ "OP_" <> suffix
  poolParty <- allocateParty $ "POOL_" <> suffix
  ethIssuer <- allocateParty $ "ETH_" <> suffix
  usdcIssuer <- allocateParty $ "USDC_" <> suffix
  lpIssuer <- allocateParty $ "LP_" <> suffix
  feeReceiver <- allocateParty $ "FEE_" <> suffix

  debug "Creating ETH token..."
  ethTokenCid <- submit ethIssuer do
    createCmd Token with
      issuer = ethIssuer
      owner = operator
      symbol = "ETH"
      amount = 100.0
      
  debug "Creating USDC token..."
  usdcTokenCid <- submit usdcIssuer do
    createCmd Token with
      issuer = usdcIssuer
      owner = operator  
      symbol = "USDC"
      amount = 200000.0
      
  debug "Creating pool..."
  poolCid <- submitMulti [operator, poolParty] [] do
    createCmd Pool with
      poolOperator = operator
      poolParty = poolParty
      lpIssuer = lpIssuer
      issuerA = ethIssuer
      issuerB = usdcIssuer
      symbolA = "ETH"
      symbolB = "USDC"
      feeBps = 30  -- 0.3% = 30 basis points
      poolId = "eth-usdc-direct"
      maxTTL = hours 24
      totalLPSupply = 0.0
      reserveA = 0.0
      reserveB = 0.0
      tokenACid = Some ethTokenCid
      tokenBCid = Some usdcTokenCid
      protocolFeeReceiver = feeReceiver
      maxInBps = 10000  -- 100%
      maxOutBps = 5000  -- 50%
      
  debug "Pool created successfully!"
  pure ()
