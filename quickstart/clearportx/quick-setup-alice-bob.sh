#!/bin/bash
set -e

echo "=========================================="
echo "  Quick Setup: Pools + Alice & Bob Tokens"
echo "=========================================="
echo ""

# Just use the existing backend API to verify current state
echo "[INFO] Checking current pools..."
curl -s http://localhost:8080/api/pools | jq -r '.[] | "\(.poolId): \(.reserveA) \(.tokenA.symbol // .symbolA) / \(.reserveB) \(.tokenB.symbol // .symbolB)"' 2>/dev/null || echo "  (Could not fetch pools)"

echo ""
echo "[INFO] Since backend doesn't have pool/mint endpoints,"
echo "       we'll create pools and tokens manually using a simple approach:"
echo ""
echo "MANUAL STEPS:"
echo ""
echo "1. Create Alice and Bob parties (if not exist):"
echo "   daml ledger allocate-party Alice --host localhost --port 5001"
echo "   daml ledger allocate-party Bob --host localhost --port 5001"
echo ""
echo "2. For new pools, we need to either:"
echo "   a) Add /api/pool/create endpoint to backend, OR"
echo "   b) Use curl to backend with existing swap endpoints, OR"
echo "   c) Create a simple DAML script"
echo ""
echo "3. For giving tokens to Alice/Bob:"
echo "   - Backend swap endpoint can be used to 'give' tokens indirectly"
echo "   - Or we create tokens via DAML and transfer ownership"
echo ""
echo "=========================================="
echo "  Simplified Approach: Use What We Have"
echo "=========================================="
echo ""
echo "Since we already have:"
echo "  - ETH-USDC-01 pool (working)"
echo "  - Backend atomic swap endpoint (working)"
echo "  - Token balance display (working)"
echo ""
echo "Let's test the E2E flow with the existing pool first,"
echo "then worry about creating more pools."
echo ""
echo "To test E2E right now:"
echo "  1. Go to https://clearportx.netlify.app"
echo "  2. Pools page shows ETH-USDC pool (visible without login)"
echo "  3. Swap page shows ETH and USDC tokens with balances"
echo "  4. Try a swap (will fail if app-provider has no tokens)"
echo ""
echo "ISSUE: app-provider currently has 0 tokens (all locked in pool)"
echo ""
echo "SOLUTION: We need to either:"
echo "  A) Create test users Alice/Bob with tokens, OR"
echo "  B) Give app-provider some tokens outside the pool"
echo ""
echo "Let me check if we have a working token mint approach..."
echo ""

# Check if we can use backend to create contracts
echo "[TESTING] Can we use backend to query app-provider tokens?"
APP_PROVIDER="app-provider::1220414f85e74ed69ca162b9874f3cf9dfa94fb4968823bd8ac9755544fcb5d72388"
curl -s "http://localhost:8080/api/tokens/${APP_PROVIDER}" | jq '.' 2>/dev/null || echo "  (Could not fetch tokens)"

echo ""
echo "=========================================="
echo "  RECOMMENDATION"
echo "=========================================="
echo ""
echo "The fastest way to test E2E flow is to:"
echo ""
echo "1. Keep existing ETH-USDC pool (created by app-provider)"
echo "2. Frontend already shows pools without login ✅"
echo "3. Frontend loads tokens from pools ✅"
echo "4. For swap testing, we need users with tokens"
echo ""
echo "Options:"
echo "  A) Add /api/admin/mint endpoint to backend (5 min)"
echo "  B) Use DAML script to mint tokens (10 min, needs DAR rebuild)"
echo "  C) Test with app-provider swapping its own pool reserves (hacky)"
echo ""
echo "Which approach do you want to take?"
echo ""
