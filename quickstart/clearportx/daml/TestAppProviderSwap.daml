module TestAppProviderSwap where

import Daml.Script
import DA.List (find)
import DA.Text (isInfixOf)
import Token.Token
import AMM.Pool
import AMM.AtomicSwap

-- Test swap with app-provider: 1 ETH â†’ USDC
testAppProviderSwap : Script ()
testAppProviderSwap = script do
  parties <- listKnownParties

  -- Find app-provider
  let appProvider = case find (\p -> "app-provider-4f1df03a" `isInfixOf` partyToText p.party) parties of
        Some p -> p.party
        None -> error "app-provider-4f1df03a not found"

  debug "ðŸ§ª Testing atomic swap with app-provider"
  debug $ "Trader: " <> show appProvider
  debug ""

  -- Find ETH-USDC pool
  pools <- query @Pool appProvider
  let ethUsdcPool = case find (\(_,p) -> p.poolId == "ETH-USDC-01") pools of
        Some (cid, _) -> cid
        None -> error "ETH-USDC-01 pool not found"

  debug "âœ… Found ETH-USDC-01 pool"
  debug ""

  -- Find app-provider's ETH token
  tokens <- query @Token appProvider
  let ethToken = case find (\(_, t) -> t.symbol == "ETH" && t.owner == appProvider) tokens of
        Some (cid, t) -> (cid, t)
        None -> error "No ETH token found for app-provider"

  let (ethCid, eth) = ethToken
  debug $ "âœ… Found ETH token: " <> show eth.amount <> " ETH"
  debug ""

  -- Create atomic swap proposal: 1 ETH â†’ USDC
  debug "ðŸ“¤ Creating atomic swap: 1 ETH â†’ USDC"
  debug "Expected output: ~1980 USDC (with 0.3% fee)"
  debug ""

  let swapAmount = 1.0
      minOutput = 1900.0  -- Conservative minimum

  swapResult <- submit appProvider do
    exerciseCmd ethCid Token_AtomicSwap with
      pool = ethPool
      amountIn = swapAmount
      minAmountOut = minOutput
      tokenOut = "USDC"

  debug $ "âœ… Swap completed!"
  debug $ "Receipt: " <> show swapResult
  debug ""

  -- Query final balances
  finalTokens <- query @Token appProvider
  let finalEth = case find (\(_, t) -> t.symbol == "ETH" && t.owner == appProvider) finalTokens of
        Some (_, t) -> t.amount
        None -> 0.0
  let finalUsdc = case find (\(_, t) -> t.symbol == "USDC" && t.owner == appProvider) finalTokens of
        Some (_, t) -> t.amount
        None -> 0.0

  debug "ðŸ“Š Final balances:"
  debug $ "ETH: " <> show finalEth <> " (was " <> show eth.amount <> ")"
  debug $ "USDC: " <> show finalUsdc
  debug ""
  debug "ðŸŽ‰ Swap test successful!"

  return ()
