{"ast":null,"code":"// Canton API - Uses ClearportX Backend\nimport { backendApi } from './backendApi';\nclass CantonService {\n  constructor() {\n    this.initialized = false;\n    this.config = void 0;\n  }\n  initialize(config) {\n    this.initialized = true;\n    this.config = config;\n    console.log('Canton API initialized with backend at:', config.ledgerApiUrl);\n    return this;\n  }\n  async isConnected() {\n    try {\n      const health = await backendApi.healthCheck();\n      return health.status === 'UP';\n    } catch {\n      return false;\n    }\n  }\n  async getHealth() {\n    return this.isConnected();\n  }\n  async queryContracts(templateType) {\n    // This is called by the real Canton API, redirect to backend\n    return [];\n  }\n  async getTokens(party) {\n    try {\n      if (!party) {\n        const currentUser = localStorage.getItem('current_user') || 'alice@clearportx';\n        return await backendApi.getTokens(currentUser);\n      }\n      return await backendApi.getTokens(party);\n    } catch (error) {\n      console.error('Get tokens failed:', error);\n      return [];\n    }\n  }\n  async getPools() {\n    try {\n      return await backendApi.getPools();\n    } catch (error) {\n      console.error('Get pools failed:', error);\n      return [];\n    }\n  }\n  async createContract() {\n    return {\n      contractId: 'mock'\n    };\n  }\n  async exerciseChoice() {\n    return {\n      result: 'success'\n    };\n  }\n}\n\n// Export singleton instance\nconst cantonService = new CantonService();\nexport const initializeCantonApi = config => {\n  return cantonService.initialize(config);\n};\nexport const cantonApi = {\n  initialize: config => cantonService.initialize(config),\n  isConnected: () => cantonService.isConnected(),\n  getHealth: () => cantonService.getHealth(),\n  queryContracts: templateType => cantonService.queryContracts(templateType),\n  getTokens: party => cantonService.getTokens(party),\n  getPools: () => cantonService.getPools(),\n  createContract: () => cantonService.createContract(),\n  exerciseChoice: () => cantonService.exerciseChoice()\n};\nexport default cantonApi;","map":{"version":3,"names":["backendApi","CantonService","constructor","initialized","config","initialize","console","log","ledgerApiUrl","isConnected","health","healthCheck","status","getHealth","queryContracts","templateType","getTokens","party","currentUser","localStorage","getItem","error","getPools","createContract","contractId","exerciseChoice","result","cantonService","initializeCantonApi","cantonApi"],"sources":["/root/canton-website/app/src/services/cantonApi.ts"],"sourcesContent":["// Canton API - Uses ClearportX Backend\nimport { backendApi } from './backendApi';\nimport { TokenInfo, PoolInfo } from '../types/canton';\n\nexport interface CantonConfig {\n  ledgerApiUrl: string;\n  adminApiUrl: string;\n  participantId: string;\n}\n\nclass CantonService {\n  private initialized = false;\n  private config?: CantonConfig;\n\n  initialize(config: CantonConfig) {\n    this.initialized = true;\n    this.config = config;\n    console.log('Canton API initialized with backend at:', config.ledgerApiUrl);\n    return this;\n  }\n\n  async isConnected(): Promise<boolean> {\n    try {\n      const health = await backendApi.healthCheck();\n      return health.status === 'UP';\n    } catch {\n      return false;\n    }\n  }\n\n  async getHealth(): Promise<boolean> {\n    return this.isConnected();\n  }\n\n  async queryContracts(templateType: string): Promise<any[]> {\n    // This is called by the real Canton API, redirect to backend\n    return [];\n  }\n\n  async getTokens(party?: string): Promise<TokenInfo[]> {\n    try {\n      if (!party) {\n        const currentUser = localStorage.getItem('current_user') || 'alice@clearportx';\n        return await backendApi.getTokens(currentUser);\n      }\n      return await backendApi.getTokens(party);\n    } catch (error) {\n      console.error('Get tokens failed:', error);\n      return [];\n    }\n  }\n\n  async getPools(): Promise<PoolInfo[]> {\n    try {\n      return await backendApi.getPools();\n    } catch (error) {\n      console.error('Get pools failed:', error);\n      return [];\n    }\n  }\n\n  async createContract(): Promise<any> {\n    return { contractId: 'mock' };\n  }\n\n  async exerciseChoice(): Promise<any> {\n    return { result: 'success' };\n  }\n}\n\n// Export singleton instance\nconst cantonService = new CantonService();\n\nexport const initializeCantonApi = (config: CantonConfig) => {\n  return cantonService.initialize(config);\n};\n\nexport const cantonApi = {\n  initialize: (config: CantonConfig) => cantonService.initialize(config),\n  isConnected: () => cantonService.isConnected(),\n  getHealth: () => cantonService.getHealth(),\n  queryContracts: (templateType: string) => cantonService.queryContracts(templateType),\n  getTokens: (party?: string) => cantonService.getTokens(party),\n  getPools: () => cantonService.getPools(),\n  createContract: () => cantonService.createContract(),\n  exerciseChoice: () => cantonService.exerciseChoice(),\n};\n\nexport default cantonApi;"],"mappings":"AAAA;AACA,SAASA,UAAU,QAAQ,cAAc;AASzC,MAAMC,aAAa,CAAC;EAAAC,YAAA;IAAA,KACVC,WAAW,GAAG,KAAK;IAAA,KACnBC,MAAM;EAAA;EAEdC,UAAUA,CAACD,MAAoB,EAAE;IAC/B,IAAI,CAACD,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpBE,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEH,MAAM,CAACI,YAAY,CAAC;IAC3E,OAAO,IAAI;EACb;EAEA,MAAMC,WAAWA,CAAA,EAAqB;IACpC,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMV,UAAU,CAACW,WAAW,CAAC,CAAC;MAC7C,OAAOD,MAAM,CAACE,MAAM,KAAK,IAAI;IAC/B,CAAC,CAAC,MAAM;MACN,OAAO,KAAK;IACd;EACF;EAEA,MAAMC,SAASA,CAAA,EAAqB;IAClC,OAAO,IAAI,CAACJ,WAAW,CAAC,CAAC;EAC3B;EAEA,MAAMK,cAAcA,CAACC,YAAoB,EAAkB;IACzD;IACA,OAAO,EAAE;EACX;EAEA,MAAMC,SAASA,CAACC,KAAc,EAAwB;IACpD,IAAI;MACF,IAAI,CAACA,KAAK,EAAE;QACV,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,kBAAkB;QAC9E,OAAO,MAAMpB,UAAU,CAACgB,SAAS,CAACE,WAAW,CAAC;MAChD;MACA,OAAO,MAAMlB,UAAU,CAACgB,SAAS,CAACC,KAAK,CAAC;IAC1C,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,OAAO,EAAE;IACX;EACF;EAEA,MAAMC,QAAQA,CAAA,EAAwB;IACpC,IAAI;MACF,OAAO,MAAMtB,UAAU,CAACsB,QAAQ,CAAC,CAAC;IACpC,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,OAAO,EAAE;IACX;EACF;EAEA,MAAME,cAAcA,CAAA,EAAiB;IACnC,OAAO;MAAEC,UAAU,EAAE;IAAO,CAAC;EAC/B;EAEA,MAAMC,cAAcA,CAAA,EAAiB;IACnC,OAAO;MAAEC,MAAM,EAAE;IAAU,CAAC;EAC9B;AACF;;AAEA;AACA,MAAMC,aAAa,GAAG,IAAI1B,aAAa,CAAC,CAAC;AAEzC,OAAO,MAAM2B,mBAAmB,GAAIxB,MAAoB,IAAK;EAC3D,OAAOuB,aAAa,CAACtB,UAAU,CAACD,MAAM,CAAC;AACzC,CAAC;AAED,OAAO,MAAMyB,SAAS,GAAG;EACvBxB,UAAU,EAAGD,MAAoB,IAAKuB,aAAa,CAACtB,UAAU,CAACD,MAAM,CAAC;EACtEK,WAAW,EAAEA,CAAA,KAAMkB,aAAa,CAAClB,WAAW,CAAC,CAAC;EAC9CI,SAAS,EAAEA,CAAA,KAAMc,aAAa,CAACd,SAAS,CAAC,CAAC;EAC1CC,cAAc,EAAGC,YAAoB,IAAKY,aAAa,CAACb,cAAc,CAACC,YAAY,CAAC;EACpFC,SAAS,EAAGC,KAAc,IAAKU,aAAa,CAACX,SAAS,CAACC,KAAK,CAAC;EAC7DK,QAAQ,EAAEA,CAAA,KAAMK,aAAa,CAACL,QAAQ,CAAC,CAAC;EACxCC,cAAc,EAAEA,CAAA,KAAMI,aAAa,CAACJ,cAAc,CAAC,CAAC;EACpDE,cAAc,EAAEA,CAAA,KAAME,aAAa,CAACF,cAAc,CAAC;AACrD,CAAC;AAED,eAAeI,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}