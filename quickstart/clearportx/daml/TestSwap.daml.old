module TestSwap where

import Daml.Script
import AMM.Pool
import Token.Token
import DA.Time (seconds, addRelTime)

testSwap : Script ()
testSwap = script do
  -- Setup parties
  poolOperator <- allocateParty "PoolOperator"
  poolParty <- allocateParty "PoolParty"
  lpIssuer <- allocateParty "LPIssuer"
  issuerUSDC <- allocateParty "IssuerUSDC"
  issuerETH <- allocateParty "IssuerETH"
  alice <- allocateParty "Alice"
  
  -- Créer pool
  pool <- submit poolOperator $ createCmd Pool with
    poolOperator, poolParty, lpIssuer
    issuerA = issuerETH
    issuerB = issuerUSDC
    symbolA = "ETH"
    symbolB = "USDC"
    feeBps = 30
    poolId = "ETH-USDC"
    maxTTL = seconds 120
  
  -- Créer tokens de liquidité pour le pool
  poolETH <- submit issuerETH $ createCmd Token with
    issuer = issuerETH
    owner = poolParty
    symbol = "ETH"
    amount = 10.0
    
  poolUSDC <- submit issuerUSDC $ createCmd Token with
    issuer = issuerUSDC
    owner = poolParty
    symbol = "USDC"
    amount = 20000.0
  
  -- Token pour Alice
  aliceUSDC <- submit issuerUSDC $ createCmd Token with
    issuer = issuerUSDC
    owner = alice
    symbol = "USDC"
    amount = 100.0
  
  debug "Initial setup complete"

  now <- getTime

  -- Swap en deux étapes avec TransferForAMM
  -- Step 1 : trader + issuerUSDC
  submitMulti [alice, issuerUSDC] [] $
    exerciseCmd pool SwapStep1_TransferToPool with
      trader = alice
      inputCid = aliceUSDC
      inputAmount = 100.0
      inputIssuer = issuerUSDC

  debug "Step 1 complete!"

  -- Step 2 : trader + poolParty + issuerETH
  (ethReceived, amountOut) <- submitMulti [alice, poolParty, issuerETH] [] $
    exerciseCmd pool SwapStep2_TransferToTrader with
      trader = alice
      poolTokenACid = poolETH
      poolTokenBCid = poolUSDC
      inputSymbol = "USDC"
      inputAmount = 100.0
      outputSymbol = "ETH"
      minOutput = 0.0
      poolAmountA = 10.0
      poolAmountB = 20000.0
      deadline = addRelTime now (seconds 60)
      maxPriceImpactBps = 10000
      outputIssuer = issuerETH

  assert (amountOut > 0.0)
  debug $ "Swap successful! Alice received " <> show amountOut <> " ETH"